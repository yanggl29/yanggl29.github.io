<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PaperReading on Guoliang</title>
    <link>https://blog.yanggliang.cc/tags/PaperReading/</link>
    <description>Recent content in PaperReading on Guoliang</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 21 Apr 2025 10:55:28 +0800</lastBuildDate>
    <atom:link href="https://blog.yanggliang.cc/tags/PaperReading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reading: Timestamp as a Service, not an Oracle</title>
      <link>https://blog.yanggliang.cc/posts/TaaS/</link>
      <pubDate>Sun, 20 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/TaaS/</guid>
      <description>&lt;p&gt;Most distributed databases rely on a timestamp oracle to order events. In our case, we have a service called TimeOracle that uses a distributed lock to ensure monotonic timestamps. However, it can’t avoid brief periods of unavailability. &#xA;  &lt;a href=&#34;https://www.vldb.org/pvldb/vol17/p994-li.pdf&#34;&gt;TaaS&lt;/a&gt; proposes a timestamp service that could serve as a perfect replacement for TimeOracle. I became curious about how to maintain monotonic timestamps while avoiding unavailability—so let’s dive into it.&lt;/p&gt;&#xA;&lt;h2 id=&#34;paper-link&#34;&gt;&#xA;  Paper Link&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#paper-link&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://www.vldb.org/pvldb/vol17/p994-li.pdf&#34;&gt;Timestamp as a Service, not an Oracle&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Consistent Hashing</title>
      <link>https://blog.yanggliang.cc/posts/ConsistentHash/</link>
      <pubDate>Tue, 08 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/ConsistentHash/</guid>
      <description>&lt;h2 id=&#34;paper-link&#34;&gt;&#xA;  Paper Link&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#paper-link&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://www.cs.princeton.edu/courses/archive/fall09/cos518/papers/chash.pdf&#34;&gt;Consistent Hashing and Random Trees: Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;something-about-hash&#34;&gt;&#xA;  Something about hash&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#something-about-hash&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Credited to &#xA;  &lt;a href=&#34;https://engineering.fb.com/2019/04/25/developer-tools/f14/&#34;&gt;F14&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Some hash functions distribute information evenly across all their bits — any change to the input causes an avalanche of changes to the hash code. Ideally, any one-bit change in the input is expected to change about half the bits of the output. These hash functions can be mapped onto a power-of-two range by just zeroing the top bits. For example, we might map hash codes across 32 chunks by zeroing all but the bottom five bits.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Percolator</title>
      <link>https://blog.yanggliang.cc/posts/Percolator/</link>
      <pubDate>Mon, 27 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/Percolator/</guid>
      <description>&lt;h2 id=&#34;论文链接&#34;&gt;&#xA;  论文链接&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%ba%e6%96%87%e9%93%be%e6%8e%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Peng.pdf&#34;&gt;Paper: Large-scale Incremental Processing Using Distributed Transactions and Notifications&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;算法描述&#34;&gt;&#xA;  算法描述&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%97%e6%b3%95%e6%8f%8f%e8%bf%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;BigTable 提供了单行的事务操作，但是有些事务是需要多行操作的，Percolator 解决的就是在 BigTable 上的多行事务操作。&lt;/p&gt;&#xA;&lt;p&gt;Percolator 实现的分布式事务依赖于三个实体： Percolator worker、TSO（timestamp oracle）、BigTable。TSO 是一个全局严格递增的时间戳服务。&lt;/p&gt;&#xA;&lt;p&gt;Percolator 存储一行数据时，会在 BigTable 存储多列数据：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;data 列： 存储 value&lt;/li&gt;&#xA;&lt;li&gt;lock 列： 存储用于分布式事务的锁信息&lt;/li&gt;&#xA;&lt;li&gt;write 列： 存储用于分布式事务的提交时间（commit_timestamp）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;transaction-write&#34;&gt;&#xA;  Transaction: Write&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#transaction-write&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Percolator 的分布式写事务是由两阶段提交实现的。一个写事务包含了多个写操作，事务开启时，Percolator 会从 TSO 获得一个 ts 作为事务的开始时间。包含两个阶段。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;PreWrite阶段&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在所有的写操作中随机选取一个作为 primary，其他的写操作作为 secondary。首先操作 primary。&lt;/li&gt;&#xA;&lt;li&gt;进行冲突检测。&#xA;&lt;ol&gt;&#xA;&lt;li&gt;如果发现 write 列存在 ts &amp;gt;= start_ts，说明其他事务在当前事务开始之后提交了。说明两个事务并发写冲突，需要 abort 当前的事务。&lt;/li&gt;&#xA;&lt;li&gt;如果在任何 ts 上发现 lock 列有数据，说明其他事务正在修改数据，仍然 abort 当前事务。也可能是另一个事务崩溃失败，需要故障恢复。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;锁定和写入。对于每一行每一列要写入的数据，先将其锁定（primary 写 lock 列，secondary 的 lock 列写入指向 primary），然后写入到 data 列中。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;Commit阶段&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spanner</title>
      <link>https://blog.yanggliang.cc/posts/Spanner/</link>
      <pubDate>Mon, 27 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/Spanner/</guid>
      <description>&lt;h2 id=&#34;terminology&#34;&gt;&#xA;  Terminology&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#terminology&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;External consistency&#xA;&lt;ul&gt;&#xA;&lt;li&gt;if a transaction &#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.yanggliang.cc/katex/katex.min.css&#34; /&gt;&#xA;&lt;script defer src=&#34;https://blog.yanggliang.cc/katex/katex.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script defer src=&#34;https://blog.yanggliang.cc/katex/auto-render.min.js&#34; onload=&#34;renderMathInElement(document.body);&#34;&gt;&lt;/script&gt;&lt;span&gt;&#xA;  \(T_1\)&#xA;&lt;/span&gt;&#xA; commits before another transaction &lt;span&gt;&#xA;  \(T_2\)&#xA;&lt;/span&gt;&#xA; starts, then &lt;span&gt;&#xA;  \(T_1\)&#xA;&lt;/span&gt;&#xA;’s commit timestamp is smaller than &lt;span&gt;&#xA;  \(T_2\)&#xA;&lt;/span&gt;&#xA;’s.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;whats-special&#34;&gt;&#xA;  What&amp;rsquo;s Special&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#whats-special&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Cross datacenter.&lt;/li&gt;&#xA;&lt;li&gt;TrueTime API.&lt;/li&gt;&#xA;&lt;li&gt;Provides external consistency at global scale.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;how-it-works&#34;&gt;&#xA;  How it works?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#how-it-works&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;structure&#34;&gt;&#xA;  Structure&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#structure&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;book-columns flex flex-wrap&#34;&gt;&#xA;&lt;div class=&#34;flex-even markdown-inner&#34; style=&#34;flex-grow: 1;&#34;&gt;&#xA;    &#xA;&lt;img src = &#39;https://fastly.jsdelivr.net/gh/yanggl29/images/content/docs/posts/PaperReading/Spanner/spanner-structure.png&#39;&gt;&#xA;&#xA;  &lt;/div&gt;&#xA;&lt;div class=&#34;flex-even markdown-inner&#34; style=&#34;flex-grow: 1;&#34;&gt;&#xA;    &#xA;&lt;img src = &#39;https://fastly.jsdelivr.net/gh/yanggl29/images/content/docs/posts/PaperReading/Spanner/spanserver.png&#39;&gt;&#xA;&#xA;  &lt;/div&gt;&#xA;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Zone: zone is the rough analog of a deployment of Bigtable servers.&lt;/li&gt;&#xA;&lt;li&gt;zonemaster: assigns data to spannerserver.&lt;/li&gt;&#xA;&lt;li&gt;spanserver: serve data to client.&lt;/li&gt;&#xA;&lt;li&gt;location proxy: client uses it to locate the spannerserver.&lt;/li&gt;&#xA;&lt;li&gt;universemaster:  a console that displays status information about all the zones for interactive debugging.&lt;/li&gt;&#xA;&lt;li&gt;placement driver: handles automated movement of data across zones on the timescale of minutes.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;spanserver&#34;&gt;&#xA;  Spanserver&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spanserver&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;transaction&#34;&gt;&#xA;  Transaction&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#transaction&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;Each transaction will be assigned a timestamp to preserves lineaizability.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
