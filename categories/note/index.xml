<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Note on Guoliang</title>
    <link>https://blog.yanggliang.cc/categories/note/</link>
    <description>Recent content in Note on Guoliang</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 05 Aug 2025 21:42:55 +0800</lastBuildDate>
    <atom:link href="https://blog.yanggliang.cc/categories/note/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reading: Timestamp as a Service, not an Oracle</title>
      <link>https://blog.yanggliang.cc/posts/TaaS/</link>
      <pubDate>Sun, 20 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/TaaS/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css&#34; integrity=&#34;sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=&#34; crossorigin=&#34;anonymous&#34; /&gt;&#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css&#34; integrity=&#34;sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=&#34; crossorigin=&#34;anonymous&#34; /&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Most distributed databases rely on a timestamp oracle to order events. In our case, we have a service called TimeOracle that uses a distributed lock to ensure monotonic timestamps. However, it can’t avoid brief periods of unavailability. &#xA;  &lt;a href=&#34;https://www.vldb.org/pvldb/vol17/p994-li.pdf&#34;&gt;TaaS&lt;/a&gt; proposes a timestamp service that could serve as a perfect replacement for TimeOracle. I became curious about how to maintain monotonic timestamps while avoiding unavailability—so let’s dive into it.&lt;/p&gt;&#xA;&lt;h2 id=&#34;paper-link&#34;&gt;&#xA;  Paper Link&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#paper-link&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://www.vldb.org/pvldb/vol17/p994-li.pdf&#34;&gt;Timestamp as a Service, not an Oracle&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Robin Hood Hashing</title>
      <link>https://blog.yanggliang.cc/posts/robinhood/</link>
      <pubDate>Fri, 11 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/robinhood/</guid>
      <description>&lt;p&gt;I found an interesting story about Robin Hood when I first learned about Robin Hood Hashing(and there is another RobinHood that provides financial services, which I don&amp;rsquo;t believe is a coincidence). Robin Hood was a bandit, but he was a good guy who robbed the rich in order to give to the poor. And that implies the basic idea behind Robin Hood Hashing.&lt;/p&gt;&#xA;&lt;p&gt;Basically, hash table has two different ways to store the values. The one is closed adressing(e.g., separate chaining) and the other is open addressing. Robin Hood Hashing is a variation of open addressing in hash tables. It aims to minimize the variance in probe sequence lengths by ensuring that elements with longer probe sequences &amp;ldquo;steal&amp;rdquo; slots from elements with shorter probe sequences. This approach helps balance the load and reduces clustering, improving overall performance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>False Sharing</title>
      <link>https://blog.yanggliang.cc/posts/FalseSharing/</link>
      <pubDate>Tue, 08 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/FalseSharing/</guid>
      <description>&lt;p&gt;Recently, we want to enable mavx2 in our project, but that results in core dumps in our test suites. Using gdb to investigate the issue, it was found that all the core dumps occur due to unaligned access in &#xA;  &lt;a href=&#34;https://github.com/facebook/folly&#34;&gt;Folly&lt;/a&gt;. Upon reviewing the assembly code produced by the compiler, it was found that Clang generates &lt;code&gt;vmovaps&lt;/code&gt;, which stands for Move Aligned Packed Single-Precision Floating-Point Values. This instuction needs a 16byte aligned variable. In contrast, using GCC appears to resolve the issue, as no core dumps occur(Apparently, that is incorrect since Clang has used more aggressive optimization). A inappropriate approach to fixing the issue is to remove &lt;code&gt;alignas&lt;/code&gt; from the &#xA;  &lt;a href=&#34;https://github.com/facebook/folly&#34;&gt;Folly&lt;/a&gt;. But why does Folly use &lt;code&gt;alignas&lt;/code&gt; despite it will employ techniques like placement new which can violate memory alignment? What will happen if we simply remove &lt;code&gt;alignas&lt;/code&gt;? The most important reason may be to prevent &lt;strong&gt;False Sharing&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Consistent Hashing</title>
      <link>https://blog.yanggliang.cc/posts/ConsistentHash/</link>
      <pubDate>Tue, 08 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/ConsistentHash/</guid>
      <description>&lt;h2 id=&#34;paper-link&#34;&gt;&#xA;  Paper Link&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#paper-link&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://www.cs.princeton.edu/courses/archive/fall09/cos518/papers/chash.pdf&#34;&gt;Consistent Hashing and Random Trees: Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;something-about-hash&#34;&gt;&#xA;  Something about hash&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#something-about-hash&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Credited to &#xA;  &lt;a href=&#34;https://engineering.fb.com/2019/04/25/developer-tools/f14/&#34;&gt;F14&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Some hash functions distribute information evenly across all their bits — any change to the input causes an avalanche of changes to the hash code. Ideally, any one-bit change in the input is expected to change about half the bits of the output. These hash functions can be mapped onto a power-of-two range by just zeroing the top bits. For example, we might map hash codes across 32 chunks by zeroing all but the bottom five bits.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The congnitive load of C&#43;&#43;</title>
      <link>https://blog.yanggliang.cc/posts/TheCongnitiveLoadOfC&#43;&#43;/</link>
      <pubDate>Tue, 08 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/TheCongnitiveLoadOfC&#43;&#43;/</guid>
      <description>&lt;h2 id=&#34;stdshared_ptr&#34;&gt;&#xA;  std::shared_ptr&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#stdshared_ptr&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Consider the following code below:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Base&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;Base() {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Derived&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Base {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;Derived() {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Wrapper&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Wrapper(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Base&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;a) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; a(a) {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Base&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; a;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Wrapper &lt;span style=&#34;color:#a6e22e&#34;&gt;do_something&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Base&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color:#a6e22e&#34;&gt;[[clang::lifetimebound]]&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Wrapper w(a);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; w;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Derived&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;make_shared&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Derived&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; do_something(t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%p&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%p&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(i.a));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Everythings seems OK but if we use the annotation &lt;code&gt;[[clang::lifetimebound]]&lt;/code&gt; from clang, we could get the following warning:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Percolator</title>
      <link>https://blog.yanggliang.cc/posts/Percolator/</link>
      <pubDate>Mon, 27 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/Percolator/</guid>
      <description>&lt;h2 id=&#34;论文链接&#34;&gt;&#xA;  论文链接&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%ba%e6%96%87%e9%93%be%e6%8e%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Peng.pdf&#34;&gt;Paper: Large-scale Incremental Processing Using Distributed Transactions and Notifications&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;算法描述&#34;&gt;&#xA;  算法描述&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%97%e6%b3%95%e6%8f%8f%e8%bf%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;BigTable 提供了单行的事务操作，但是有些事务是需要多行操作的，Percolator 解决的就是在 BigTable 上的多行事务操作。&lt;/p&gt;&#xA;&lt;p&gt;Percolator 实现的分布式事务依赖于三个实体： Percolator worker、TSO（timestamp oracle）、BigTable。TSO 是一个全局严格递增的时间戳服务。&lt;/p&gt;&#xA;&lt;p&gt;Percolator 存储一行数据时，会在 BigTable 存储多列数据：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;data 列： 存储 value&lt;/li&gt;&#xA;&lt;li&gt;lock 列： 存储用于分布式事务的锁信息&lt;/li&gt;&#xA;&lt;li&gt;write 列： 存储用于分布式事务的提交时间（commit_timestamp）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;transaction-write&#34;&gt;&#xA;  Transaction: Write&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#transaction-write&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Percolator 的分布式写事务是由两阶段提交实现的。一个写事务包含了多个写操作，事务开启时，Percolator 会从 TSO 获得一个 ts 作为事务的开始时间。包含两个阶段。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;PreWrite阶段&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在所有的写操作中随机选取一个作为 primary，其他的写操作作为 secondary。首先操作 primary。&lt;/li&gt;&#xA;&lt;li&gt;进行冲突检测。&#xA;&lt;ol&gt;&#xA;&lt;li&gt;如果发现 write 列存在 ts &amp;gt;= start_ts，说明其他事务在当前事务开始之后提交了。说明两个事务并发写冲突，需要 abort 当前的事务。&lt;/li&gt;&#xA;&lt;li&gt;如果在任何 ts 上发现 lock 列有数据，说明其他事务正在修改数据，仍然 abort 当前事务。也可能是另一个事务崩溃失败，需要故障恢复。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;锁定和写入。对于每一行每一列要写入的数据，先将其锁定（primary 写 lock 列，secondary 的 lock 列写入指向 primary），然后写入到 data 列中。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;Commit阶段&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spanner</title>
      <link>https://blog.yanggliang.cc/posts/Spanner/</link>
      <pubDate>Mon, 27 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/Spanner/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css&#34; integrity=&#34;sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=&#34; crossorigin=&#34;anonymous&#34; /&gt;&#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css&#34; integrity=&#34;sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=&#34; crossorigin=&#34;anonymous&#34; /&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 id=&#34;terminology&#34;&gt;&#xA;  Terminology&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#terminology&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;External consistency&#xA;&lt;ul&gt;&#xA;&lt;li&gt;if a transaction &#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.yanggliang.cc/katex/katex.min.css&#34; /&gt;&#xA;&lt;script defer src=&#34;https://blog.yanggliang.cc/katex/katex.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script defer src=&#34;https://blog.yanggliang.cc/katex/auto-render.min.js&#34; onload=&#34;renderMathInElement(document.body);&#34;&gt;&lt;/script&gt;&lt;span&gt;&#xA;  \(T_1\)&#xA;&lt;/span&gt;&#xA; commits before another transaction &lt;span&gt;&#xA;  \(T_2\)&#xA;&lt;/span&gt;&#xA; starts, then &lt;span&gt;&#xA;  \(T_1\)&#xA;&lt;/span&gt;&#xA;’s commit timestamp is smaller than &lt;span&gt;&#xA;  \(T_2\)&#xA;&lt;/span&gt;&#xA;’s.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;whats-special&#34;&gt;&#xA;  What&amp;rsquo;s Special&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#whats-special&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Cross datacenter.&lt;/li&gt;&#xA;&lt;li&gt;TrueTime API.&lt;/li&gt;&#xA;&lt;li&gt;Provides external consistency at global scale.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;how-it-works&#34;&gt;&#xA;  How it works?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#how-it-works&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;structure&#34;&gt;&#xA;  Structure&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#structure&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;book-columns flex flex-wrap&#34;&gt;&#xA;&lt;div class=&#34;flex-even markdown-inner&#34; style=&#34;flex-grow: 1;&#34;&gt;&#xA;    &#xA;&#xA;&lt;link rel=&#34;stylesheet&#34; href=https://blog.yanggliang.cc/css/hugo-easy-gallery.css /&gt;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34; style=&#34;background-image: url(&#39;https://cdn.sa.net/2025/08/01/X4UBgS1DjZFAMu8.png&#39;);&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://cdn.sa.net/2025/08/01/X4UBgS1DjZFAMu8.png&#34; /&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://cdn.sa.net/2025/08/01/X4UBgS1DjZFAMu8.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;  &lt;/div&gt;&#xA;&lt;div class=&#34;flex-even markdown-inner&#34; style=&#34;flex-grow: 1;&#34;&gt;&#xA;    &#xA;&#xA;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34; style=&#34;background-image: url(&#39;https://cdn.sa.net/2025/08/01/em9SxT5OYDu8yER.png&#39;);&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://cdn.sa.net/2025/08/01/em9SxT5OYDu8yER.png&#34; /&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://cdn.sa.net/2025/08/01/em9SxT5OYDu8yER.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;  &lt;/div&gt;&#xA;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Zone: zone is the rough analog of a deployment of Bigtable servers.&lt;/li&gt;&#xA;&lt;li&gt;zonemaster: assigns data to spannerserver.&lt;/li&gt;&#xA;&lt;li&gt;spanserver: serve data to client.&lt;/li&gt;&#xA;&lt;li&gt;location proxy: client uses it to locate the spannerserver.&lt;/li&gt;&#xA;&lt;li&gt;universemaster:  a console that displays status information about all the zones for interactive debugging.&lt;/li&gt;&#xA;&lt;li&gt;placement driver: handles automated movement of data across zones on the timescale of minutes.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;spanserver&#34;&gt;&#xA;  Spanserver&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spanserver&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;transaction&#34;&gt;&#xA;  Transaction&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#transaction&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;Each transaction will be assigned a timestamp to preserves lineaizability.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Clash配置</title>
      <link>https://blog.yanggliang.cc/posts/clash/</link>
      <pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/clash/</guid>
      <description>&lt;h3 id=&#34;下载与安装&#34;&gt;&#xA;  下载与安装&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%8b%e8%bd%bd%e4%b8%8e%e5%ae%89%e8%a3%85&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;可以自行到仓库中下载最新版本，也可以直接复制以下命令并执行。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://github.com/Dreamacro/clash/releases/download/v0.19.0/clash-linux-amd64-v0.19.0.gz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;依次执行下面命令。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gzip -d clash-linux-amd64-v0.19.0.gz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mv clash-linux-amd64-v0.19.0 /usr/bin/clash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chmod +x /usr/bin/clash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;将其注册为服务并开机自启&#34;&gt;&#xA;  将其注册为服务并开机自启&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b0%86%e5%85%b6%e6%b3%a8%e5%86%8c%e4%b8%ba%e6%9c%8d%e5%8a%a1%e5%b9%b6%e5%bc%80%e6%9c%ba%e8%87%aa%e5%90%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;在&lt;code&gt;/lib/systemd/system/&lt;/code&gt;下创建文件&lt;code&gt;clash@.service&lt;/code&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo vim /lib/systemd/system/clash@.service&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将以下内容复制到&lt;code&gt;clash@.service&lt;/code&gt;中：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Unit]&#xA;Description=A rule based proxy in Go for %i.&#xA;After=network.target&#xA;&#xA;[Service]&#xA;Type=simple&#xA;User=%i&#xA;Restart=on-abort&#xA;ExecStart=/usr/bin/clash&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行以下命令重新加载服务模块以及启动clash服务：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl daemon-reload&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl start clash@user &lt;span style=&#34;color:#75715e&#34;&gt;#user为自己当前的用户名&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;设置开机自启动：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl enable clash@user&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;配置ui&#34;&gt;&#xA;  配置UI&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%aeui&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;第一次启动会在&lt;code&gt;~/.config/clash&lt;/code&gt;下生成初始文件，现在开始配置dashboard，使得其可以在浏览器中配置节点。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd ~/.config/clash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://github.com/haishanh/yacd/archive/gh-pages.zip&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;unzip gh-pages.zip&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mv yacd-gh-pages/ dashboard/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;订阅文件可以从机场官网获得，或者复制Windows下的配置文件，在其中添加上如下配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;secret&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;xxxx&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;external-controller&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0.0.0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9090&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#若是云服务器记得开放端口&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;external-ui&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;dashboard&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重启服务：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl restart clash@user&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时便可以通过&lt;code&gt;localhost:9090/ui/&lt;/code&gt;或&lt;code&gt;ip:9090/ui/&lt;/code&gt;进行访问了。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
