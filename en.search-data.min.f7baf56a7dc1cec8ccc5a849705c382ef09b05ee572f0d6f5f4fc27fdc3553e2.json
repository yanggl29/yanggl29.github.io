[{"id":0,"href":"/posts/Linux/clash%E9%85%8D%E7%BD%AE/","title":"Clash配置","section":"Linux","content":" 下载与安装 # 可以自行到仓库中下载最新版本，也可以直接复制以下命令并执行。\nwget https://github.com/Dreamacro/clash/releases/download/v0.19.0/clash-linux-amd64-v0.19.0.gz 依次执行下面命令。\ngzip -d clash-linux-amd64-v0.19.0.gz mv clash-linux-amd64-v0.19.0 /usr/bin/clash chmod +x /usr/bin/clash 将其注册为服务并开机自启 # 在/lib/systemd/system/下创建文件clash@.service：\nsudo vim /lib/systemd/system/clash@.service 将以下内容复制到clash@.service中：\n[Unit] Description=A rule based proxy in Go for %i. After=network.target [Service] Type=simple User=%i Restart=on-abort ExecStart=/usr/bin/clash [Install] WantedBy=multi-user.target 执行以下命令重新加载服务模块以及启动clash服务：\nsystemctl daemon-reload systemctl start clash@user #user为自己当前的用户名 设置开机自启动：\nsystemctl enable clash@user 配置UI # 第一次启动会在~/.config/clash下生成初始文件，现在开始配置dashboard，使得其可以在浏览器中配置节点。\ncd ~/.config/clash wget https://github.com/haishanh/yacd/archive/gh-pages.zip unzip gh-pages.zip mv yacd-gh-pages/ dashboard/ 订阅文件可以从机场官网获得，或者复制Windows下的配置文件，在其中添加上如下配置：\nsecret: xxxx external-controller: 0.0.0.0:9090 #若是云服务器记得开放端口 external-ui: dashboard 重启服务：\nsystemctl restart clash@user 此时便可以通过localhost:9090/ui/或ip:9090/ui/进行访问了。\n"},{"id":1,"href":"/posts/Nihongo/39%E8%AA%B2/","title":"39課","section":"Nihongo","content":" 単語 # いね　稲\nきり　霧\n霧がかかっている。 もん　門\nぶたい　舞台\nやね　屋根　屋顶\nるりがわら　瑠璃瓦\nきいろ　黄色\nバック　back　背景\nこの建物をバックにして、写真を撮ってもらいませんか。 かしきり　貸切　包租\n貸切バス 貸切温泉 いっぱん　一般\nそぼ　祖母\nジャズ　jazz\nやがい　野外コンサート　露天音乐会\nえんだか　円高　日元升值\n円安　日元贬值 ゆしゅつ　輸出　出口、输出\nゆにゅう　輸入 えいきょう　影響\nしげん　資源\n資源が豊かです。　ゆたか　豊か きおん　気温\n気温が高い／低い。　ひくい　低い おき　沖　海上、湖心\nおきなわ　沖縄 かいがい　海外\nクジラ　鯨\nサメ　鮫　鲨鱼\nむかし　昔\nべつめい　別名\nほう　方　方面\nどうろこうじ　道路工事\n通勤ラッシュ　つうきんrush　上下班高峰\nつうこうきんし　通行禁止\nとおく　遠く\n霧がかかっているから、遠くまでがはっきり見えません。 みわたす　見渡す　眺望、远望\n山を見渡す。 つづく　続く\n円高が続く。 なくなる　無くなる　完、丢失\nお金が無くなった。 財布が無くなった。 そだつ　育つ　生长、成长\n稲が育ちます。 ふえる　増える\n交通事故が増えました。 つれる　連れる　带、领（人或动物）\n子供をつれる。 けっせきする　欠席する　缺席\n会議を欠席する。 ゆにゅうする　輸入する\nリットル　升\nせっかく\nせっかく北京に来て、必ず万里の長城へ行きます。 文法 # ～て～　／　～ないで（ずに／せずに）～　伴随前项的动作进行后项动作 # 眼鏡をかけて本を読む。 上を向いて歩こう。　むいて　向いて 帽子をかぶって出かけた。 今日荷物がないので、歩いて帰ります。 息子は今朝、ご飯を食べないで出かけた。 息子は今朝、ご飯を食べずに出かけた。 予約しないで行ったら、満席で入れなかった。 予約せずに行ったら、満席で入れなかった。 歯を磨かないで寝てはいけません。　は　歯　みがく　磨く 歯を磨かずに寝てはいけません。 小句简体/形2な/名词の　＋　ために、～　前项是后项原因，书面，更多用于不情愿的事情的原因 # 台風が近づいているために波が高くなっている。　なみ　波 由于台风接近，风浪很大 去年の夏は気温が低かったために、米は不作だった。　ひくかった　低かった　こめ　米　ふさく　不作 事故のために現在5キロの渋滞です。 ～ていく／～てくる # 疲れているんでしょう、ちょっと休んでいきなさい。 夜は寒いから、熱いものを食べていきましょう。 傘を電車の中に忘れてきた。 子供を連れていきます。 お弁当を持ってきてください。 夜は寒いから、コートを着ていきましょう。 夜里冷，穿着大衣去吧。 船は離れていく。　ふね　船　はなれる　離れる 船离我远去。 たくさんの人が乗ってきましたね。 好多人上来。 たくさんの人が乗っていきましたね。 好多人上去。 子供はお母さんのところへ走っていきます。 ちょっと出かけてきます。 我去一下就回。 この手紙を出してきます。 手を洗ってきます。 "},{"id":2,"href":"/posts/Nihongo/38%E8%AA%B2/","title":"38課","section":"Nihongo","content":" 単語 # しょうひん　商品\nごみばこ　ゴミ箱垃圾箱\nコップ　kop（荷兰语）　杯子\nペットボトル　pet bottle　塑料瓶\nエンジン　engine　引擎\nタイヤ　tire　轮胎\nフートン　胡同　胡同\nろじ　路地　小巷、弄堂\nにほんしょく　日本食\nさしみ　刺身\nたな　棚　橱柜\nたたみ　畳　草垫、榻榻米\nきもの　着物　和服\nぐあい　具合　情况、状况\n体の具合がいい／悪い。 ひらがな　平仮名\nカタカナ　片仮名\nあかちゃん　赤ちゃん　婴儿\nはんぶん　半分　一半\nさいしゅう　最終\n試合\nえいじしんぶん　英字新聞\nえいせいほうそう　衛星放送　卫星广播\nストレス　stress　精神紧张状态\nかいしょうほう　解消法\nストレス解消法 いりくむ　入り組む　错综复杂\n入り組んでいる。 この道は入り組んでいますね。 話が入り組んでいて、半分ぐらいしか分かりませんでした。 へる　減る\nうごかす　動かす　开动、移动\n体をうごかす。　锻炼身体 かつ　勝つ　取胜\n試合に勝つ／負ける。　まける とおりぬける　通り抜ける　走得出去、穿过\n感じる\n痛みを感じる。 苦痛を感じる。　くつう　苦痛 取り替える\nこの服がちょっと小さいので、取り替えてくださいませんか。 てつやする　徹夜する　熬夜\nやけどする　火傷する　烫伤、烧伤\nなんだか　何だか　总觉得、总有点\n何だか残念です。 何だか嬉しいです。 この道、暗くて、何だか怖いです。 でんとうてき　伝統的\nこのへん　この辺\nいそいで　急いで　急ぐ\n文法 # ～ように、～ # みんなに聞こえるように、大きな声で話してください。 見えるように、大きく書きました。 転ばないように、ゆっくり歩きましょう。　ころばない　転ばない 家族が心配しないように、手紙を書きます。 オリンピックに参加できるように、毎日練習している。 いつでも出られるように、準備してあります。 お年寄りも使えるように、操作が簡単になっています。 子供が触れないように、この薬は棚の一番上に置きました。 タバコを買えないように、お金を隠した。　かくす　隠す コピーできないように、コピー機を壊した。 留学のために、お金を貯める。 留学に行くために、貯金している。 留学に行けるように、貯金している。 ようになる # けがが治って、歩けるようになりました。　なおる　治る 着物を自分で着られるようになりました。 年を取ると、小さい字が読めなくなります。 太りましたから、好きな服が着られなくなりました。 日本食には慣れましたから、刺身も食べるようになった。 最近、中村さんはお酒を飲むようになりました。 アメリカに来てから、私はあまり中国語を話さなくなりました。 車を買ってから、私はあまりバスに乗らなくなりました。 ようにする # のどが痛いので、今日はあまり話さないようにします。 健康のために、徹夜しないようにします。 陳さんは毎日、英字新聞を読むようにしています。 けんこうのために、油ものは食べないようにします。　あぶら　油 毎朝、7時に起きるようにしています。 もっと野菜を食べるようにしてください。 仕事を休む時に、必ず連絡するようにしてください。 暗い光の下で、できるだけ本を読まないようにしてください。 "},{"id":3,"href":"/posts/Nihongo/37%E8%AA%B2/","title":"37課","section":"Nihongo","content":" 単語 # ようじ　用事 たいかい　大会 きぼ　規模 けいかく　計画 きそく　規則 ひよう　費用 しお　塩 メダル　medal ソフト　software　アプリ　app はんにん　犯人 たんい　単位　计量单位、学分 ばんごうふだ　番号札　顺序条、号码条 こさじ　小さじ　小勺 ボリューム　volume ちょくつうれっしゃ　直通列車 せかいいさん　世界遺産 かんこう　観光スポット　spot こえる　超える しゅつじょうする　出場する しゃくほうする　釈放する つまみぐいする　つまみ食いする　偷吃 ふくしゅうする　よしゅうする　復習　予習 せいこう　しっぱい　成功　失敗 ぜいたく　贅沢　奢侈 贅沢な生活 こっそり　偷偷地、悄悄地 さすが　不愧是、果然 じっさいに　実際に "},{"id":4,"href":"/posts/Nihongo/36%E8%AA%B2/","title":"36課","section":"Nihongo","content":" 単語 # こうじょう　工場\nえんとつ　煙突\nグラウンド　ground\nおくじょう　屋上　屋顶\n屋上カフェ　cafe\nたこ　凧　风筝\nタープ　tape　磁带\nどくしょ　読書\nしんせい　申請　友達申請を送りました。\nかんさいべん　関西弁\n日本文化　日本文化に興味がある。\nはかりうり　量り売り　秤斤卖\nご主人／旦那さん\n主人／旦那／夫（おっと）　自分の\nもちあるく　持ち歩く　携带　たくさんの現金を持ち歩くのは危険です。\nくりかえす　繰り返す　反复　もう一度繰り返してください。\nさわぐ　騒ぐ　吵嚷\nまにあう　間に合う　来得及　電車に間に合わなかった。\nねむる　眠る　睡着　彼は寝ています。　彼は眠っています。\nなく　鳴く　叫、鸣、啼（动物）　声\n朝起きると、鳥が鳴いているのを聞きました。 なる　鳴る　鸣响、响起（物体）　音\nベルが鳴ったら、すぐ席に戻ってください。 ベル　Bell　もどる　戻る なく　泣く　哭泣\nよろこぶ　喜ぶ　喜悦（自他动词）\n就職ができて、両親は喜んでくれます。 しゅうしょく　就職　找到仕事父母很为我高兴。 やくだつ　役立つ　有用\n研究に役立つ資料。 全然役立たない。 やとう　雇う　雇佣\nふる　振る　挥动、摆动\n手を振る。 見える、聞こえる\n遠くの山が見える。 鳥の鳴き声が聞こえる。 つうじる　通じる　通过、相通\n言葉が通じない。 あげる　揚げる　放、扬起\n凧を揚げる。（たこ　凧）　放风筝 なれる　慣れる\n～に慣れる。 新しい生活に慣れました。 ぬれる　濡れる（自动）　淋湿\n雨に濡れました。 やける　焼ける　着火、燃烧\n家が焼ける。 さげる　下げる　降低、下降\n生産コストを下げる。　降低生产成本 くろうする　苦労する\n生活に苦労しました。 しゅっせきする　出席する\n文法 # 小句1て/で、小句2 # 动词て形，小句2多为心理活动或感情变化的表达。 形容词くて（で），小句2多为结果或能力的表达。 名词＋で，小句2多为不良结果。 无论小句1接续什么，小句2不能以强烈意志表达结局，如命令，禁止，劝诱。 わざわざ来てくれて、嬉しかった。 遅くなって、すみません。 そんな難しい試験に合格して、よかったですね。 最初言葉が通じなくて、とても困ります。 恋人にずっと会うことができなくて、悲しいです。 会議があって、行くことができません。 森さんは頭が痛くて、会社を休みました。 説明が上手で、よくわかりました。 使い方が簡単で、子供でも操作することができる。（そうさ　操作） うるさくて、テレビの音が聞こえません。 雨で、家でテレビを見るしかないです。 病気で、学校を休みました。 仕事で、おととい駅前の喫茶店で李さんと会いました。 父が大阪の出身で、いつも関西弁で話します。 助词　に　用途 # ～は　动词の/名词　＋　に　使います。 この写真は何に使いますか。 パスポートの申請に使います。 パスポートを申請するのに使います。 その紙はプレゼントを包むのに使います。 助词　に　评价标准 # ～は　动词の/名词　＋　に　评价类标准。 アニメは日本語の勉強に役立ちます。 アニメは日本語を勉強するのに役立ちます。 この車の修理に２時間ぐらいかかります。 この車を修理するのに２時間ぐらいかかります。 スーパーが近いので、このマンションは買い物に便利です。 早寝早起きは体にいいと思います。 この本は大人には簡単ですが、子供には難しいです。 その仕事はそんなに簡単で、僕にもできますよ。 限定　～ばかり # 名词＋ばかり　表示所列举的事务全部相同，ばかり表限定时，消极语感比较强。 動詞て＋ばかりいる　表示相同的事务いつも発生する。消极语感比较强。 彼はいつも文句ばかり言っている。　（もんく　文句）　他（一天到晚）净发牢骚。 あの人はいつも嘘ばかりつくから、あまり信じないほうがいいですよ。 いつもご迷惑ばかりかけて、すみません。 張さんは毎日お酒を飲んでばかりいます。 森さんはいつも失敗してばかりいます。 母親は朝から怒ってばかりいます。　（おこる　怒る） 食べてばかりいると、太りますよ。　（ふとり　太り） 三つだけ食べました。　只吃了三个。 三つばかり食べました。　吃了三个左右。 "},{"id":5,"href":"/posts/Nihongo/35%E8%AA%B2/","title":"35課","section":"Nihongo","content":" 単語 # カタログ　商品目录 もくじ　目次　书目录 たからくじ　宝くじ　くじ（籤）　たからくじに当たる。 きく　効く　有效 いわう　祝う　入学祝い あく　空く　明日空いてる？　この部屋は空いてる？ くさる　腐る　バナナが腐ります。 みつける　見つける　仕事を見つける。 たずねる　訪ねる　友人の家を訪ねる。 たいざいする　滞在する　東京に滞在中。 さんかする　参加する　試合に参加する。 きゅうけいする　休憩する かんぱいする　乾杯する かんぜんなじゅんび　完全な準備 春になると、だんだん暖かくなる。 暖かい　あたたかい 秋になると、紅葉の葉がだんだん赤くなります。 紅葉　もみじ 赤い　あかい 文法 # ～たら、～ # 未知的假定条件：如果~，就~\n以可预见的事情或状态作条件，后续不能使用过去式，表示预计的情况\n满足前项条件，出现了后项预料之外的结果，后续使用存续状态或过去式，用法与と相同\n与「と」不同的是，「たら」的后項可以接意志，请求，命令等表达。\n雨だったら　雨でなかったら 雨でしたら　雨でありませんでしたら もし宝くじに当たったら、新しい家を買うつもりです。 要是中彩票了，我打算买个新房子。 今月暇でなかったら、来なくてもいいです。 天気が良かったら、ハイキングに行きます。 天气好的话，我就去郊游。 来週の金曜日、帰国する。帰国したら、すぐ君に電話する。　下周五，我要回国。回国后，马上就给你打电话。 コピー機を使い終わったら、電源を切ってください。　用完打印机，请把电源关掉。 うちに帰ると／帰ったら、電気がまだついている。　回到家后，发现灯还亮着呢。 うちに着くと／着いたら、友達から手紙が来た。　到家了，发现有一封来信。 ～ても、～ # 即使~，也~ 休みの日でも、忙しいです。 簡単な単語でも、なかなか覚えることができない。　即使是简单的单词也怎么都记不住。 日本語が上手ではなくても、この仕事はできますよ。 私はスペイン語を知らないので、見ても分かりません。 この言葉はいくら調べても、たぶん辞書にはないでしょう。　这个说法无论怎么查，字典里可能都不会有吧。（いくら～ても、～。　不管怎样，无论怎样都~） 必要ではないものがいくら安くても、買いません。 これは小学生でもできる計算です。 よく効く薬でも、たくさん飲むと体によくありません。 日本人でも知らない日本語。 ～だけ、～ # これは全部、他のはない。\nうちのクラスには男が3人だけいます。\nこれだけ面白くないと思います。\n休みは今日だけです。\n好きな人は君だけです。\nうちの会社で、学歴が高い人は李さんだけではないです。　（がくれき　学歴）\nこの頃、今日だけ（は）雨です。　这些天，只有今天下雨。\nうちの会社にわたしだけ（が）中国人です。\n（は）、（が）、（を）　なくてもいい 君　だけに／にだけ　会いたいです。\nこの事は君　だけと／とだけ　相談します。\nと、で、に　なくではできません。 ～しか、～ # 数量词/名词+しか+否定表达，除了前项，其他都不是，仅仅、只 わたしは水しか飲みません。 わたしは水だけ飲みます。 会議室には李さんだけいます。 会議室には李さんしかいません。 こうなったら、最後までやるしかないです。 そんなにいやならやめるしかないです。 この病気は手術しかないです。　（しゅじゅつ　手術） 冷蔵庫の中には野菜しかないです。 私は生卵だけ食べません。 私は生卵しか食べません。 "},{"id":6,"href":"/posts/Summary/2023/","title":"2023 年度总结","section":"Summary","content":" 开头 # 虽然一直有这个打算写一个年终总结，然而等到坐到电脑面前，面对着屏幕的时候又不知道从哪里写起。可能是我的 2023 实在是谈不上有任何的深度或者是值得纪念的地方。强行写的话难免变成一篇又臭又长的流水账。\n只有知道了书的结尾，才会明白书的开头。此刻的所有不安与迷茫，都是为了将来回头的一刻\n"},{"id":7,"href":"/posts/PaperReading/Percolator/","title":"Percolator","section":"Paper Reading","content":" 论文链接 # Paper: Large-scale Incremental Processing Using Distributed Transactions and Notifications\n算法描述 # BigTable 提供了单行的事务操作，但是有些事务是需要多行操作的，Percolator 解决的就是在 BigTable 上的多行事务操作。\nPercolator 实现的分布式事务依赖于三个实体： Percolator worker、TSO（timestamp oracle）、BigTable。TSO 是一个全局严格递增的时间戳服务。\nPercolator 存储一行数据时，会在 BigTable 存储多列数据：\ndata 列： 存储 value lock 列： 存储用于分布式事务的锁信息 write 列： 存储用于分布式事务的提交时间（commit_timestamp） Transaction: Write # Percolator 的分布式写事务是由两阶段提交实现的。一个写事务包含了多个写操作，事务开启时，Percolator 会从 TSO 获得一个 ts 作为事务的开始时间。包含两个阶段。\nPreWrite阶段\n在所有的写操作中随机选取一个作为 primary，其他的写操作作为 secondary。首先操作 primary。 进行冲突检测。 如果在 start_ts 之后，发现 write 列存在数据，说明其他事务在当前事务开始之后提交了。说明两个事务并发写冲突，需要 abort 当前的事务。 如果在任何 ts 上发现 lock 列有数据，说明其他事务正在修改数据，仍然 abort 当前事务。也可能是另一个事务崩溃失败，需要故障恢复。 锁定和写入。对于每一行每一列要写入的数据，先将其锁定（primary 写 lock 列，secondary 的 lock 列写入指向 primary），然后写入到 data 列中。 Commit阶段\n从 TSO 获得一个 ts 作为 commit_ts。 提交 primary，如果失败则 abort。 检查 primary 上的 lock 信息是否还在，不在则 abort（其他事务认为当前事务失败，清理掉 lock）。 以 commit_ts 为 timestamp，写入 write 列，value 为 start_ts。清理 lock 列。此时为 commit point，一旦完成此步骤则视为事务成功。在此之前出错都 abort 回滚。 提交成功后给 Percolator 返回成功，secondary 异步写入，即使失败也可以通过 primary 的数据状态来判断 secondary 的结果。 Transaction: Read # 在 Percolator 中的事务隔离级别是 Snapshot Isolation。写事物主要负责清理锁。\n一些细节：\n让 pre-write 阶段先于（happens-before）获取 commit_ts。所以在 commit_ts 之后，prewrite 的数据必然被锁定了。 如果读取时，发现当前数据已被锁定（锁定意味着其他写事务正在执行），则等待并重试。当然也有可能另一个事务已经崩溃。 缺点 # Percolator 基于 BigTable 单行事务实现的分布式事务，其实是一个乐观事务模型。只有在事务提交时，才会检测写-写冲突。Percolator 事务模型的优点在于原理简单方便理解，不再需要一个中心化的单独 Coordinator，而是把 Coordinator 角色的职责进行细分，把能持久化的部分交给 BigTable 处理，后续也不再依赖 Client 的恢复。但它的缺点也是显而易见的：\nClient 和 BigTable 之间的 RPC、BigTable 和 ChunkServer 之间的RPC都会比较耗费网络资源； TSO 是一个中心化的点。并发事务很多的时候，会占用很多内存； 并发大事务可能会频繁冲突，而重试有可能会导致雪崩效应（这时候就用悲观事务模型会更好）； 懒处理事务 crash 导致一个事务的延迟可能会比较高； 依靠读操作清理锁，如果清理不及时，会增加其他正常事务写冲突的概率； 考虑另一个场景：有一个大事务和很多小事务，且它们的热点overlap，那么大事务可能受小事务的影响进入饥饿状态（即很长时间内无法执行）。 "},{"id":8,"href":"/posts/PaperReading/Spanner/","title":"Spanner","section":"Paper Reading","content":" Terminology # External consistency if a transaction \\(T_1\\) commits before another transaction \\(T_2\\) starts, then \\(T_1\\) ’s commit timestamp is smaller than \\(T_2\\) ’s. What\u0026rsquo;s Special # Cross datacenter. TrueTime API. Provides external consistency at global scale. How it works? # Structure # Zone: zone is the rough analog of a deployment of Bigtable servers. zonemaster: assigns data to spannerserver. spanserver: serve data to client. location proxy: client uses it to locate the spannerserver. universemaster: a console that displays status information about all the zones for interactive debugging. placement driver: handles automated movement of data across zones on the timescale of minutes. Spanserver # Transaction # Each transaction will be assigned a timestamp to preserves lineaizability.\nRead # For read-only transaction, Paxos group\u0026rsquo;s leader assigns \\(s_{read}\\) . If read happens on single-site, Spanner just assigns LastTS() to \\(s_{read}\\) , where LastTS() is the timestamp of the last committed write at a Paxos group. For read happens on multi-Paxos groups, Spanner chose a simple choice. It just has its reads execute at \\(s_{read} = TT.now().latest\\) (which may wait for safe time to advance).\nWhat is safe time? - safe time is to preserve lineaizability. A replica can satisfy a read at a timestamp \\(t\\) if \\(t \\le t_{safe}\\) . Snapshot read is much easier than RO. It can execute at any replicas that are sufficiently up-to-date.\nWhat about Read-Write Transactions?\nDirectory # A directory is the unit of data placement, which is a set of contiguous keys that share a common prefix. When data is moved between Paxos groups, it is moved directory by directory. Paxos group consists of tablets. Each spanserver implements a single Paxos state machine on top of each tablet.\nHow to move directory? By using Movedir. It will moves data in backgroud, and start a transaction to move changed datas. some information: https://www.scs.stanford.edu/17au-cs244b/notes/spanner.txt https://quizlet.com/blog/quizlet-cloud-spanner\nShortly of SSTable # It is self-describing and therefore highly redundant, and traversal of individual columns within the same locality group is particularly inefficient.\nWhy does traversing the individual columns within the same locality group cause inefficiency? test remedy expediency initiate replicated shed lexicographically inevitable extends interval compute incarnation abdicate invariant monotonicity causality analogous deviation remedied revenue outages modulo Cumulative\nWhat?? # In straight-up Paxos, both reads and writes go through same protocol Leader must wait another round trip to hear from quorum Why not just handle read locally at the leader (no data to replicate)? Later leader could have externalized writes, violating linearizability How do we fix Paxos to handle reads at leader? Nodes grant leader lease\u0026ndash;promise not to ack other leaders for time T Given leases from quorum, leader knows no other leaders, can read locally Assumes bounded clock drift\n"}]