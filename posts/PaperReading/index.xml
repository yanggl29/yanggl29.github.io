<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Beygl</title>
    <link>http://localhost:1313/posts/PaperReading/</link>
    <description>Recent content on Beygl</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1313/posts/PaperReading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Percolator</title>
      <link>http://localhost:1313/posts/PaperReading/Percolator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/PaperReading/Percolator/</guid>
      <description>&lt;h1 id=&#34;论文链接&#34;&gt;&#xA;  论文链接&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%ba%e6%96%87%e9%93%be%e6%8e%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Peng.pdf&#34;&gt;Paper: Large-scale Incremental Processing Using Distributed Transactions and Notifications&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;算法描述&#34;&gt;&#xA;  算法描述&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%97%e6%b3%95%e6%8f%8f%e8%bf%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;BigTable 提供了单行的事务操作，但是有些事务是需要多行操作的，Percolator 解决的就是在 BigTable 上的多行事务操作。&lt;/p&gt;&#xA;&lt;p&gt;Percolator 实现的分布式事务依赖于三个实体： Percolator worker、TSO（timestamp oracle）、BigTable。TSO 是一个全局严格递增的时间戳服务。&lt;/p&gt;&#xA;&lt;p&gt;Percolator 存储一行数据时，会在 BigTable 存储多列数据：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;data 列： 存储 value&lt;/li&gt;&#xA;&lt;li&gt;lock 列： 存储用于分布式事务的锁信息&lt;/li&gt;&#xA;&lt;li&gt;write 列： 存储用于分布式事务的提交时间（commit_timestamp）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;transaction-write&#34;&gt;&#xA;  Transaction: Write&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#transaction-write&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Percolator 的分布式写事务是由两阶段提交实现的。一个写事务包含了多个写操作，事务开启时，Percolator 会从 TSO 获得一个 ts 作为事务的开始时间。包含两个阶段。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;PreWrite阶段&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在所有的写操作中随机选取一个作为 primary，其他的写操作作为 secondary。首先操作 primary。&lt;/li&gt;&#xA;&lt;li&gt;进行冲突检测。&#xA;&lt;ol&gt;&#xA;&lt;li&gt;如果在 start_ts 之后，发现 write 列存在数据，说明其他事务在当前事务开始之后提交了。说明两个事务并发写冲突，需要 abort 当前的事务。&lt;/li&gt;&#xA;&lt;li&gt;如果在任何 ts 上发现 lock 列有数据，说明其他事务正在修改数据，仍然 abort 当前事务。也可能是另一个事务崩溃失败，需要故障恢复。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;锁定和写入。对于每一行每一列要写入的数据，先将其锁定（primary 写 lock 列，secondary 的 lock 列写入指向 primary），然后写入到 data 列中。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;Commit阶段&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
