<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Guoliang</title>
    <link>https://blog.yanggliang.cc/posts/</link>
    <description>Recent content in Blog on Guoliang</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://blog.yanggliang.cc/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TaaS</title>
      <link>https://blog.yanggliang.cc/posts/TaaS/</link>
      <pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/TaaS/</guid>
      <description></description>
    </item>
    <item>
      <title>Robin Hood Hashing</title>
      <link>https://blog.yanggliang.cc/posts/robinhood/</link>
      <pubDate>Fri, 11 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/robinhood/</guid>
      <description>&lt;p&gt;I found an interesting story about Robin Hood when I first learned about Robin Hood Hashing(and there is another RobinHood that provides financial services, which I don&amp;rsquo;t believe is a coincidence). Robin Hood was a bandit, but he was a good guy who robbed the rich in order to give to the poor. And that implies the basic idea behind Robin Hood Hashing.&lt;/p&gt;&#xA;&lt;p&gt;Basically, hash table has two different ways to store the values. The one is closed adressing(e.g., separate chaining) and the other is open addressing. Robin Hood Hashing is a variation of open addressing in hash tables. It aims to minimize the variance in probe sequence lengths by ensuring that elements with longer probe sequences &amp;ldquo;steal&amp;rdquo; slots from elements with shorter probe sequences. This approach helps balance the load and reduces clustering, improving overall performance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>False Sharing</title>
      <link>https://blog.yanggliang.cc/posts/FalseSharing/</link>
      <pubDate>Tue, 08 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/FalseSharing/</guid>
      <description>&lt;p&gt;Recently, we want to enable mavx2 in our project, but that results in core dumps in our test suites. Using gdb to investigate the issue, it was found that all the core dumps occur due to unaligned access in &#xA;  &lt;a href=&#34;https://github.com/facebook/folly&#34;&gt;Folly&lt;/a&gt;. Upon reviewing the assembly code produced by the compiler, it was found that Clang generates &lt;code&gt;vmovaps&lt;/code&gt;, which stands for Move Aligned Packed Single-Precision Floating-Point Values. This instuction needs a 16byte aligned variable. In contrast, using GCC appears to resolve the issue, as no core dumps occur(Apparently, that is incorrect since Clang has used more aggressive optimization). A inappropriate approach to fixing the issue is to remove &lt;code&gt;alignas&lt;/code&gt; from the &#xA;  &lt;a href=&#34;https://github.com/facebook/folly&#34;&gt;Folly&lt;/a&gt;. But why does Folly use &lt;code&gt;alignas&lt;/code&gt; despite it will employ techniques like placement new which can violate memory alignment? What will happen if we simply remove &lt;code&gt;alignas&lt;/code&gt;? The most important reason may be to prevent &lt;strong&gt;False Sharing&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>2024</title>
      <link>https://blog.yanggliang.cc/posts/2024/</link>
      <pubDate>Wed, 01 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/2024/</guid>
      <description>&lt;h2 id=&#34;旅行&#34;&gt;&#xA;  旅行&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%85%e8%a1%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;今年去了挺多地方：武汉、京都、大阪、奈良，以及北海道。没想到今年会去两次日本，第一次是为了京吹巡礼（巡礼回来后被京吹背刺），第二次则是和小伙伴们去北海道旅游（感谢 fdl 辛苦开车）。&lt;/p&gt;&#xA;&lt;p&gt;到达北海道的第一反应是：原来这就是雪国，从天空往下望去，一片白茫茫。言语没有办法形容当时心中的震撼，可能是南方人第一次见到这么多的雪，造成了不小的冲击：&#xA;&lt;img src = &#39;https://cdn.jsdelivr.net/gh/yanggl29/images/content/docs/posts/Summary/2024/yuki.jpeg&#39;&gt;&#xA;参观了北大（北海道大学），遇见了一个树洞里的雪人：&#xA;&lt;img src = &#39;https://cdn.jsdelivr.net/gh/yanggl29/images/content/docs/posts/Summary/2024/yukidaruma.jpeg&#39;&gt;&#xA;在旭川看到了 tomori：&#xA;&lt;img src = &#39;https://cdn.jsdelivr.net/gh/yanggl29/images/content/docs/posts/Summary/2024/tomori.jpeg&#39;&gt;&#xA;夜爬天狗山（其实也就 18 点），缆车由于大风大雪已经停运了，爬到一半太滑无法站立只得下山，至少在天狗山留下了一段痕迹：&#xA;&lt;img src = &#39;https://cdn.jsdelivr.net/gh/yanggl29/images/content/docs/posts/Summary/2024/loveletter.jpeg&#39;&gt;&#xA;登别地狱谷，漫山的乌鸦以及烟雾，&lt;del&gt;同伴都说很臭，但是我疑似阳了基本没闻到啥味&lt;/del&gt;：&#xA;&lt;img src = &#39;https://cdn.jsdelivr.net/gh/yanggl29/images/content/docs/posts/Summary/2024/jigoku.jpeg&#39;&gt;&#xA;由于没有买到函馆的车票，函馆行程被迫取消，但是临时起意决定去洞爷湖，收获到了不错的风景：&#xA;&lt;img src = &#39;https://cdn.jsdelivr.net/gh/yanggl29/images/content/docs/posts/Summary/2024/touyako.jpeg&#39;&gt;&lt;/p&gt;&#xA;&lt;p&gt;再放一波图片，&lt;del&gt;拍到人生照片了家人们&lt;/del&gt;：&#xA;&lt;img src = &#39;https://cdn.jsdelivr.net/gh/yanggl29/images/content/docs/posts/Summary/2024/daikichiyama.jpeg&#39;&gt;&#xA;&lt;img src = &#39;https://cdn.jsdelivr.net/gh/yanggl29/images/content/docs/posts/Summary/2024/enoshima.jpeg&#39;&gt;&#xA;&lt;img src = &#39;https://cdn.jsdelivr.net/gh/yanggl29/images/content/docs/posts/Summary/2024/sapporoeki.jpeg&#39;&gt;&#xA;&lt;img src = &#39;https://cdn.jsdelivr.net/gh/yanggl29/images/content/docs/posts/Summary/2024/densya.jpeg&#39;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;工作&#34;&gt;&#xA;  工作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b7%a5%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;这部分要写啥呢？明明占用了我 2024 的绝大部分时间，但却没有什么东西可以写的，先这样吧。&lt;/p&gt;&#xA;&lt;h2 id=&#34;最后&#34;&gt;&#xA;  最后&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%80%e5%90%8e&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;本来没打算写年终总结，去年开始写博客时留下的 flag 也没有实现，最后我只能假装什么都没有发生，灰溜溜的将其删掉。&lt;/p&gt;&#xA;&lt;p&gt;用一句话来概括我的 2024，我会说是充满了痛苦以及迷茫。&lt;/p&gt;&#xA;&lt;p&gt;10 月份开始感觉失眠变得更加严重了，于是终于下定决心去看了医生。吃了近一个月的安眠药，安眠药的效果就是让人可以睡觉，但是睡眠质量并不好。副作用也很明显，一到下午就昏昏欲睡，眼睛睁不开。停药反应非常严重，基本上是停药后接下来的一个星期都没办法好好睡觉，尤其是第一个晚上，完全无法入睡。到最后也没有治好失眠，起床的时候总是会头痛。由于缺少睡眠，感觉记忆力变得越来越差了。&lt;del&gt;写到这里时突然想起在机场时和同伴说起背护照号的事情，于是赶紧背了一下来看看自己有没有忘记。&lt;/del&gt;&lt;/p&gt;&#xA;&lt;p&gt;12 月的旅行并没有我想象中的那么开心，出发前充满了期待，出发之后却只是一种解脱的感觉，并没有真正的享受旅行的乐趣。&lt;del&gt;上班上的&lt;/del&gt;&lt;/p&gt;&#xA;&lt;p&gt;顺便一提，今年开始学习吹小号了。但是最近感觉越练越差，还是在纠结嘴形。高音倒是可以吹上去，但是吹曲子的时候就完全不行了。希望可以吹得更好，うまくなりたい。&lt;/p&gt;&#xA;&lt;p&gt;即使是现在，我也没有办法摆脱那种迷茫空虚的感觉。像是无头苍蝇一样，没有什么目标的生活。而对我来说，没有目标的生活，就像是一场没有终点的马拉松，实在是太辛苦了。&lt;/p&gt;&#xA;&lt;p&gt;现在是 2025 年 1 月 1 日，接下来希望自己可以摆脱痛苦，摆脱迷茫。有时间的话多写一点技术博客（去年一时兴起写的乱七八糟）。考虑一下是不是要去健身（会有时间吗）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Consistent Hashing</title>
      <link>https://blog.yanggliang.cc/posts/ConsistentHash/</link>
      <pubDate>Tue, 08 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/ConsistentHash/</guid>
      <description>&lt;h2 id=&#34;paper-link&#34;&gt;&#xA;  Paper Link&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#paper-link&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://www.cs.princeton.edu/courses/archive/fall09/cos518/papers/chash.pdf&#34;&gt;Consistent Hashing and Random Trees: Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;something-about-hash&#34;&gt;&#xA;  Something about hash&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#something-about-hash&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Credited to &#xA;  &lt;a href=&#34;https://engineering.fb.com/2019/04/25/developer-tools/f14/&#34;&gt;F14&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Some hash functions distribute information evenly across all their bits — any change to the input causes an avalanche of changes to the hash code. Ideally, any one-bit change in the input is expected to change about half the bits of the output. These hash functions can be mapped onto a power-of-two range by just zeroing the top bits. For example, we might map hash codes across 32 chunks by zeroing all but the bottom five bits.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The congnitive load of C&#43;&#43;</title>
      <link>https://blog.yanggliang.cc/posts/TheCongnitiveLoadOfC&#43;&#43;/</link>
      <pubDate>Tue, 08 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/TheCongnitiveLoadOfC&#43;&#43;/</guid>
      <description>&lt;h2 id=&#34;stdshared_ptr&#34;&gt;&#xA;  std::shared_ptr&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#stdshared_ptr&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Consider the following code below:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Base&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;Base() {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Derived&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Base {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;Derived() {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Wrapper&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Wrapper(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Base&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;a) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; a(a) {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Base&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; a;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Wrapper &lt;span style=&#34;color:#a6e22e&#34;&gt;do_something&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Base&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color:#a6e22e&#34;&gt;[[clang::lifetimebound]]&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Wrapper w(a);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; w;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Derived&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;make_shared&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Derived&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; do_something(t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%p&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%p&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(i.a));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Everythings seems OK but if we use the annotation &lt;code&gt;[[clang::lifetimebound]]&lt;/code&gt; from clang, we could get the following warning:&lt;/p&gt;</description>
    </item>
    <item>
      <title>日本旅行</title>
      <link>https://blog.yanggliang.cc/posts/japan/</link>
      <pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/japan/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#intro&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在和同学聊天的时候提到日本旅游，同学让我写一个攻略（暂且认为是攻略吧）参考一下，因此便有了这篇博客。因为是随手写的，可能有不完善的地方，有其他问题的话可以通过邮件和我联系。&lt;/p&gt;&#xA;&lt;h2 id=&#34;住宿&#34;&gt;&#xA;  住宿&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%8f%e5%ae%bf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;住宿的话基本就是两个选择：民宿或者酒店。我和同学一起去的时候，选择民宿或者酒店的参考标准是停留时长，在一些城市停留的时间比较久则预定民宿，一些城市停留的时间比较短则预定酒店。我自己一个人旅游的时候因为安全考虑以及性价比，选择了预定酒店。&lt;/p&gt;&#xA;&lt;p&gt;如果人比较多且时间较长的话，民宿的性价比更高，有时候房东可能会提供一些交通工具（自行车），这个可以在 airbnb 上看介绍或者和房东交流。人少的话预定民宿的性价比就比较低了。酒店的平均价格需要看时间以及地段，我自己单人的话平均每晚在 RMB 400-500，地段是还比较好的。另外预定酒店时最好是在 Google Maps 上查一下评价，搜一下关键词 bed bugs（最近（2024-6）日本的床虫好像有点泛滥），防止被咬引起过敏等等。&lt;/p&gt;&#xA;&lt;h2 id=&#34;交通&#34;&gt;&#xA;  交通&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%a4%e9%80%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;交通基本上都是使用公共交通，极少的情况下需要打车。打车比较简单，下载一个 Uber 就可以了，下面主要讲一下公共交通。&lt;/p&gt;&#xA;&lt;h3 id=&#34;交通卡&#34;&gt;&#xA;  交通卡&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%a4%e9%80%9a%e5%8d%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;如果是苹果手机的话可以直接在钱包上开通一张西瓜卡（suica），支持银联充值，非常方便。除了一般的电车公车之外，便利店和贩卖机也都可以使用交通卡进行支付。如果不是苹果手机的话可以在 JR（Japan Railways） 的机器（一般落地之后在机场就可以找到）上购买游客专用的西瓜卡，游客专用卡是有有效期的，离开日本前记得把余额用完。除了西瓜卡之外，实体卡还有别的选择，基本上都可以在日本全国使用，常见的有以下几种：pasmo、icoca。另外，除了在手机上开通的公交卡可以使用手机支付充值之外（苹果目前就是使用苹果支付），其他的实体卡都只支持现金充值。这点还是挺重要的，特别是仅使用实体卡旅行的需要注意一下。&lt;/p&gt;&#xA;&lt;h3 id=&#34;地图&#34;&gt;&#xA;  地图&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9c%b0%e5%9b%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;推荐使用 Google Maps，按照上面的导航走不会有问题的。需要注意的是有一种换乘是无需下车的，Maps 上会有相应的提示，看到这个不需要惊讶。&lt;/p&gt;&#xA;&lt;h2 id=&#34;支付&#34;&gt;&#xA;  支付&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%94%af%e4%bb%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;我自己的支付方式有四种：现金、VISA、电子支付（支付宝、微信）、公交卡。电子支付几乎很少用到，主要是使用现金以及 VISA。不过电子支付在日本的主要城市以及主要景点都是可以使用的。推荐准备足够的现金，因为有些店是 cash only 的。另外的支付方式都有不能用的风险。&lt;/p&gt;&#xA;&lt;p&gt;就我个人而言，7 天的行程最多需要 5 万日元（时间点是 2024-06，基本使用现金的情况下）。我是购物比较少的情况，基本都是吃吃喝喝还有充值公交卡。有大宗的消费购物可以直接使用 VISA，不需要使用现金（一般这种店都会支持信用卡）。&lt;/p&gt;&#xA;&lt;h2 id=&#34;景点&#34;&gt;&#xA;  景点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%99%af%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;景点就是见仁见智了，我也仅仅去过 5 个地方：东京、富士山、京都、大阪、奈良。我去过的地方中，按照个人喜好排序的话如下：京都 &amp;gt; 富士山 &amp;gt; 东京 &amp;gt; 大阪 &amp;gt; 奈良。京都的文化氛围很浓，可以比较沉浸式的感受日本文化；而富士山则是风景比较好；东京大阪都属于大城市，我感觉差不多，东京排在前边单纯是因为东京周围的神奈川县和千叶县比较有意思；奈良如果对佛教文化感兴趣的话可以去看一看，我个人是觉得没什么意思，奈良的鹿比较多，味比较大，需要做好心理准备。&lt;/p&gt;&#xA;&lt;h2 id=&#34;最后&#34;&gt;&#xA;  最后&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%80%e5%90%8e&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;随便放点照片吧，主要是巡礼的照片，只能说看动画的人是这样的。&#xA;&lt;img src = &#39;https://cdn.jsdelivr.net/gh/yanggl29/images/content/docs/posts/Travel/Japan/shimokitazawa.jpg&#39;&gt;&#xA;&lt;img src = &#39;https://cdn.jsdelivr.net/gh/yanggl29/images/content/docs/posts/Travel/Japan/oregairu.jpg&#39;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Percolator</title>
      <link>https://blog.yanggliang.cc/posts/Percolator/</link>
      <pubDate>Mon, 27 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/Percolator/</guid>
      <description>&lt;h2 id=&#34;论文链接&#34;&gt;&#xA;  论文链接&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%ba%e6%96%87%e9%93%be%e6%8e%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Peng.pdf&#34;&gt;Paper: Large-scale Incremental Processing Using Distributed Transactions and Notifications&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;算法描述&#34;&gt;&#xA;  算法描述&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%97%e6%b3%95%e6%8f%8f%e8%bf%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;BigTable 提供了单行的事务操作，但是有些事务是需要多行操作的，Percolator 解决的就是在 BigTable 上的多行事务操作。&lt;/p&gt;&#xA;&lt;p&gt;Percolator 实现的分布式事务依赖于三个实体： Percolator worker、TSO（timestamp oracle）、BigTable。TSO 是一个全局严格递增的时间戳服务。&lt;/p&gt;&#xA;&lt;p&gt;Percolator 存储一行数据时，会在 BigTable 存储多列数据：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;data 列： 存储 value&lt;/li&gt;&#xA;&lt;li&gt;lock 列： 存储用于分布式事务的锁信息&lt;/li&gt;&#xA;&lt;li&gt;write 列： 存储用于分布式事务的提交时间（commit_timestamp）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;transaction-write&#34;&gt;&#xA;  Transaction: Write&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#transaction-write&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Percolator 的分布式写事务是由两阶段提交实现的。一个写事务包含了多个写操作，事务开启时，Percolator 会从 TSO 获得一个 ts 作为事务的开始时间。包含两个阶段。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;PreWrite阶段&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在所有的写操作中随机选取一个作为 primary，其他的写操作作为 secondary。首先操作 primary。&lt;/li&gt;&#xA;&lt;li&gt;进行冲突检测。&#xA;&lt;ol&gt;&#xA;&lt;li&gt;如果发现 write 列存在 ts &amp;gt;= start_ts，说明其他事务在当前事务开始之后提交了。说明两个事务并发写冲突，需要 abort 当前的事务。&lt;/li&gt;&#xA;&lt;li&gt;如果在任何 ts 上发现 lock 列有数据，说明其他事务正在修改数据，仍然 abort 当前事务。也可能是另一个事务崩溃失败，需要故障恢复。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;锁定和写入。对于每一行每一列要写入的数据，先将其锁定（primary 写 lock 列，secondary 的 lock 列写入指向 primary），然后写入到 data 列中。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;Commit阶段&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spanner</title>
      <link>https://blog.yanggliang.cc/posts/Spanner/</link>
      <pubDate>Mon, 27 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/Spanner/</guid>
      <description>&lt;h2 id=&#34;terminology&#34;&gt;&#xA;  Terminology&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#terminology&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;External consistency&#xA;&lt;ul&gt;&#xA;&lt;li&gt;if a transaction &#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.yanggliang.cc/katex/katex.min.css&#34; /&gt;&#xA;&lt;script defer src=&#34;https://blog.yanggliang.cc/katex/katex.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script defer src=&#34;https://blog.yanggliang.cc/katex/auto-render.min.js&#34; onload=&#34;renderMathInElement(document.body);&#34;&gt;&lt;/script&gt;&lt;span&gt;&#xA;  \(T_1\)&#xA;&lt;/span&gt;&#xA; commits before another transaction &lt;span&gt;&#xA;  \(T_2\)&#xA;&lt;/span&gt;&#xA; starts, then &lt;span&gt;&#xA;  \(T_1\)&#xA;&lt;/span&gt;&#xA;’s commit timestamp is smaller than &lt;span&gt;&#xA;  \(T_2\)&#xA;&lt;/span&gt;&#xA;’s.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;whats-special&#34;&gt;&#xA;  What&amp;rsquo;s Special&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#whats-special&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Cross datacenter.&lt;/li&gt;&#xA;&lt;li&gt;TrueTime API.&lt;/li&gt;&#xA;&lt;li&gt;Provides external consistency at global scale.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;how-it-works&#34;&gt;&#xA;  How it works?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#how-it-works&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;structure&#34;&gt;&#xA;  Structure&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#structure&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;book-columns flex flex-wrap&#34;&gt;&#xA;&lt;div class=&#34;flex-even markdown-inner&#34; style=&#34;flex-grow: 1;&#34;&gt;&#xA;    &#xA;&lt;img src = &#39;https://cdn.jsdelivr.net/gh/yanggl29/images/content/docs/posts/PaperReading/Spanner/spanner-structure.png&#39;&gt;&#xA;&#xA;  &lt;/div&gt;&#xA;&lt;div class=&#34;flex-even markdown-inner&#34; style=&#34;flex-grow: 1;&#34;&gt;&#xA;    &#xA;&lt;img src = &#39;https://cdn.jsdelivr.net/gh/yanggl29/images/content/docs/posts/PaperReading/Spanner/spanserver.png&#39;&gt;&#xA;&#xA;  &lt;/div&gt;&#xA;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Zone: zone is the rough analog of a deployment of Bigtable servers.&lt;/li&gt;&#xA;&lt;li&gt;zonemaster: assigns data to spannerserver.&lt;/li&gt;&#xA;&lt;li&gt;spanserver: serve data to client.&lt;/li&gt;&#xA;&lt;li&gt;location proxy: client uses it to locate the spannerserver.&lt;/li&gt;&#xA;&lt;li&gt;universemaster:  a console that displays status information about all the zones for interactive debugging.&lt;/li&gt;&#xA;&lt;li&gt;placement driver: handles automated movement of data across zones on the timescale of minutes.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;spanserver&#34;&gt;&#xA;  Spanserver&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spanserver&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;transaction&#34;&gt;&#xA;  Transaction&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#transaction&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;Each transaction will be assigned a timestamp to preserves lineaizability.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Clash配置</title>
      <link>https://blog.yanggliang.cc/posts/clash/</link>
      <pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.yanggliang.cc/posts/clash/</guid>
      <description>&lt;h3 id=&#34;下载与安装&#34;&gt;&#xA;  下载与安装&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%8b%e8%bd%bd%e4%b8%8e%e5%ae%89%e8%a3%85&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;可以自行到仓库中下载最新版本，也可以直接复制以下命令并执行。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://github.com/Dreamacro/clash/releases/download/v0.19.0/clash-linux-amd64-v0.19.0.gz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;依次执行下面命令。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gzip -d clash-linux-amd64-v0.19.0.gz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mv clash-linux-amd64-v0.19.0 /usr/bin/clash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chmod +x /usr/bin/clash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;将其注册为服务并开机自启&#34;&gt;&#xA;  将其注册为服务并开机自启&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b0%86%e5%85%b6%e6%b3%a8%e5%86%8c%e4%b8%ba%e6%9c%8d%e5%8a%a1%e5%b9%b6%e5%bc%80%e6%9c%ba%e8%87%aa%e5%90%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;在&lt;code&gt;/lib/systemd/system/&lt;/code&gt;下创建文件&lt;code&gt;clash@.service&lt;/code&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo vim /lib/systemd/system/clash@.service&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将以下内容复制到&lt;code&gt;clash@.service&lt;/code&gt;中：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Unit]&#xA;Description=A rule based proxy in Go for %i.&#xA;After=network.target&#xA;&#xA;[Service]&#xA;Type=simple&#xA;User=%i&#xA;Restart=on-abort&#xA;ExecStart=/usr/bin/clash&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行以下命令重新加载服务模块以及启动clash服务：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl daemon-reload&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl start clash@user &lt;span style=&#34;color:#75715e&#34;&gt;#user为自己当前的用户名&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;设置开机自启动：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl enable clash@user&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;配置ui&#34;&gt;&#xA;  配置UI&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%aeui&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;第一次启动会在&lt;code&gt;~/.config/clash&lt;/code&gt;下生成初始文件，现在开始配置dashboard，使得其可以在浏览器中配置节点。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd ~/.config/clash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://github.com/haishanh/yacd/archive/gh-pages.zip&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;unzip gh-pages.zip&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mv yacd-gh-pages/ dashboard/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;订阅文件可以从机场官网获得，或者复制Windows下的配置文件，在其中添加上如下配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;secret&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;xxxx&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;external-controller&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0.0.0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9090&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#若是云服务器记得开放端口&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;external-ui&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;dashboard&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重启服务：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl restart clash@user&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时便可以通过&lt;code&gt;localhost:9090/ui/&lt;/code&gt;或&lt;code&gt;ip:9090/ui/&lt;/code&gt;进行访问了。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
